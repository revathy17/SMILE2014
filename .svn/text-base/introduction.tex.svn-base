\section{Introduction}
\label{sec:Introduction}
Centralized social networking websites, such as Twitter or Facebook, have raised, on the one hand, scalability issues \cite{facebookscale} --- due to the growing number of participants --- and, on the other hand, policy concerns --- such as control, privacy and ownership over the user's published data \cite{fbprivacy}. 
Distributed Social Networks, such as SMOB\footnote{\url{http://smob.me}}, StatusNet\footnote{\url{http://status.net}}, Diaspora\footnote{\url{http://joindiaspora.com}} or OneSocialWeb\footnote{\url{http://onesocialweb.org}}, aim to solve this issue by enabling architectures where people own their data and share it intentionally. While they use different stack, their goal is to allow users to setup their own ``Social Space'' --- as people can do now by setting up a weblog ---. Synchronisation between the different user spaces is performed with tools and protocols ranging from XMPP\footnote{\url{http://xmpp.org}} to SPARQL 1.1 Update and its protocol\footnote{\url{http://www.w3.org/TR/sparql11-http-rdf-update/}} to OStatus\footnote{\url{http://ostatus.org}} or to Activity Streams\footnote{\url{http://activitystrea.ms/}}.
Yet, scalability, and most importantly privacy are still ongoing challenges. New techniques are needed to deal with information overload and to ensure content is directed only to intended recipient. This would enable, for instance, to keep a large list of followers/friends\footnote{I.e. people allowed to see your content and information}, and to limit the distribution of particular content to only a subset of people, on-demand (as opposed to generic policies such as ``friends'' or ``family''). For example, limiting content about project X only to project members, this list being dynamically generated.
% --- also solving the problem of manually maintaining user groups. 
%one could automatically broadcast --- and restrict --- content about project X to members or the project, where these project members are not predefined but dynamically identified from other sources (also solving the problem of manually maintaining user groups). 

To achieve this goal, we have built an extension of Google's PubSubHubbub protocol \cite{pushspec} (aka PuSH, described in the next section), that improves both the scalability and the privacy issues in Distributed Social Networks. We enhanced its original broadcasting feature in order to allow publishers to decide whom they want to share their information with, among the users in their social network. Using our approach, content is delivered on-demand to a list of interested parties, as defined by the publisher, but using dynamic preferences. We do this by combining PuSH (including an RDF ontology to describe its core attributes), SPARQL 1.1 Update and a the Privacy Preference Ontology \cite{privacypref2010} --- a lightweight vocabulary for modeling user privacy on the Social Web. Therefore, our approach aims at combining ``the best of both worlds'', re-using efficient and pragmatic Web 2.0 approaches (PuSH and RSS) with outcomes from the Semantic Web community (lightweight vocabularies and SPARQL).
%% TODO : Describe the structure of the paper
In the rest of this paper we first discuss some background information used in our work (Section \ref{sec:background}). We then describe our motivation for, and how we extended the PuSH protocol (Section \ref{sec:architecture}). Further we detail an implementation use-case (Section \ref{sec:implementation}) and conclude with the related work (Section \ref{sec:related}).
%We also present a use-case of applying this to SMOB (our (Semantic Microblogging framework), even though the architecture is application agnostic and can be adopted by any system that requires scalable and privacy-aware content broadcasting.


% ==> The next sentence should go in the BG where we describe PuSH
%Since the traditional pubsubhubbub protocol decouples the followee and the followers the users are completely unaware of his/her followers. The content published will be delivered to all the followers who subscribe to the user's feeds. Although this feature is helpful for broadcasting content where the topic is in focus, it is not suitable for federated social web where user's content is the focus. The users will have no control over their information once posted. Our implementation will allowusers\cite{smob} to decide whom they want to share information with.   
%Linking of FOAF profiles by detecting duplicates [Linking Social Netwoeks on the Web with FOAF:]
%\comment{PAVAN}{Should we write motivation}
